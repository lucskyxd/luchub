-- SimpleSpyV3_Improved.lua
-- Versão melhorada para captação eficiente de RemoteEvents e RemoteFunctions.
-- Autor: Adaptado por [SeuNome]

-- Configurações globais
getgenv().SimpleSpyMaxTableSize = 1000
getgenv().SimpleSpyMaxStringSize = 10000

-- Serviços
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")
local GuiService = game:GetService("GuiService")

-- Variáveis essenciais
local SimpleSpy3 = Instance.new("ScreenGui")
local Storage = Instance.new("Folder")
local remoteEvent = Instance.new("RemoteEvent", Storage)
local remoteFunction = Instance.new("RemoteFunction", Storage)
local unreliableRemoteEvent = Instance.new("UnreliableRemoteEvent", Storage)

local originalEvent = remoteEvent.FireServer
local originalFunction = remoteFunction.InvokeServer
local originalUnreliableEvent = unreliableRemoteEvent.FireServer
local originalNamecall

-- Configurações
local configs = {
    logcheckcaller = false,
    autoblock = false,
    funcEnabled = true,
    advancedinfo = false,
    supersecretdevtoggle = false
}

-- Tabelas de dados
local logs = {}
local blacklist = {}
local blocklist = {}
local connectedRemotes = {}
local remoteLogs = {}
local history = {}
local excluding = {}
local DecompiledScripts = {}
local generation = {}

-- Funções utilitárias
local function SafeGetService(service)
    return game:GetService(service)
end

local function deepclone(tbl)
    local copy = {}
    for k, v in pairs(tbl) do
        if type(v) == "table" then
            copy[k] = deepclone(v)
        else
            copy[k] = v
        end
    end
    return copy
end

local function IsCyclicTable(tbl)
    local checked = {}
    local function check(t)
        if checked[t] then return true end
        checked[t] = true
        for _, v in pairs(t) do
            if type(v) == "table" and check(v) then
                return true
            end
        end
        return false
    end
    return check(tbl)
end

-- Interface gráfica
local Background = Instance.new("Frame")
Background.Name = "Background"
Background.Parent = SimpleSpy3
Background.BackgroundTransparency = 1
Background.Position = UDim2.new(0, 500, 0, 200)
Background.Size = UDim2.new(0, 450, 0, 268)

-- [Restante da criação da interface gráfica...]

-- Hook de remotes melhorado
local function newRemoteHandler(data)
    if configs.autoblock then
        local id = data.id
        if excluding[id] then return end
        
        if not history[id] then
            history[id] = {badOccurances = 0, lastCall = tick()}
        end
        
        if tick() - history[id].lastCall < 1 then
            history[id].badOccurances += 1
            if history[id].badOccurances > 3 then
                excluding[id] = true
                return
            end
        else
            history[id].badOccurances = 0
        end
        history[id].lastCall = tick()
    end

    if not tablecheck(blacklist, data.remote, data.id) and not IsCyclicTable(data.args) then
        if (data.remote:IsA("RemoteEvent") or data.remote:IsA("UnreliableRemoteEvent")) and string.lower(data.method) == "fireserver" then
            newRemote("event", data)
        elseif data.remote:IsA("RemoteFunction") and string.lower(data.method) == "invokeserver" then
            newRemote("function", data)
        end
    end
end

-- Hook principal
local function setupHooks()
    local function newNamecall(...)
        local method = getnamecallmethod()
        if method and (method:lower() == "fireserver" or method:lower() == "invokeserver") then
            if typeof(...) == 'Instance' then
                local remote = (...)
                if remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction") or remote:IsA("UnreliableRemoteEvent") then
                    if not configs.logcheckcaller and checkcaller() then
                        return originalNamecall(...)
                    end

                    local id = tostring(remote)
                    local blockcheck = blocklist[id] or blocklist[remote.Name]
                    local args = {select(2, ...)}

                    if not (blacklist[id] or blacklist[remote.Name]) and not IsCyclicTable(args) then
                        local data = {
                            method = method,
                            remote = remote,
                            args = deepclone(args),
                            callingscript = getcallingscript(),
                            id = id,
                            blockcheck = blockcheck
                        }

                        if configs.funcEnabled then
                            data.infofunc = debug.info(2, "f")
                        end

                        task.spawn(newRemoteHandler, data)
                    end

                    if blockcheck then return nil end
                end
            end
        end
        return originalNamecall(...)
    end

    originalNamecall = hookmetamethod(game, "__namecall", newNamecall)
end

-- Inicialização
local function init()
    SimpleSpy3.Name = "SimpleSpyV3_Improved"
    SimpleSpy3.Parent = (gethui and gethui()) or (syn and syn.protect_gui and syn.protect_gui(SimpleSpy3)) or CoreGui
    SimpleSpy3.ResetOnSpawn = false

    Storage.Name = "SimpleSpyStorage"
    Storage.Parent = SimpleSpy3

    setupHooks()
    
    -- Configurar interface
    -- [Código para criar botões, frames, etc...]
    
    print("SimpleSpy V3 Improved carregado com sucesso!")
end

-- Função para desligar
local function shutdown()
    if originalNamecall then
        hookmetamethod(game, "__namecall", originalNamecall)
    end
    
    hookfunction(remoteEvent.FireServer, originalEvent)
    hookfunction(remoteFunction.InvokeServer, originalFunction)
    hookfunction(unreliableRemoteEvent.FireServer, originalUnreliableEvent)
    
    SimpleSpy3:Destroy()
    Storage:Destroy()
    getgenv().SimpleSpyExecuted = false
end

-- Exportar funções principais
getgenv().SimpleSpyShutdown = shutdown

-- Iniciar
if not getgenv().SimpleSpyExecuted then
    getgenv().SimpleSpyExecuted = true
    init()
else
    shutdown()
    init()
end

-- [Restante das funções de interface e utilitárias...]

return {
    shutdown = shutdown,
    toggle = function() 
        getgenv().SimpleSpyEnabled = not getgenv().SimpleSpyEnabled 
        print("SimpleSpy " .. (getgenv().SimpleSpyEnabled and "ativado" or "desativado"))
    end
}
