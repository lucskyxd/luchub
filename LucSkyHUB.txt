local Player = game:GetService("Players").LocalPlayer
local CoreGui = game:GetService("CoreGui")

-- Criação da interface
local MonitorUI = Instance.new("ScreenGui")
MonitorUI.Name = "RemoteMonitorPro"
MonitorUI.Parent = CoreGui
MonitorUI.ResetOnSpawn = false

-- Frame principal
local MainFrame = Instance.new("Frame")
MainFrame.Size = UDim2.new(0.4, 0, 0.5, 0)
MainFrame.Position = UDim2.new(0.6, 0, 0.25, 0)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 30)
MainFrame.BackgroundTransparency = 0.2
MainFrame.Active = true
MainFrame.Draggable = true
MainFrame.Parent = MonitorUI

-- Configuração da lista de eventos
local EventList = Instance.new("ScrollingFrame")
EventList.Size = UDim2.new(1, -10, 1, -40)
EventList.Position = UDim2.new(0, 5, 0, 35)
EventList.BackgroundTransparency = 1
EventList.ScrollBarThickness = 6
EventList.Parent = MainFrame

local UIListLayout = Instance.new("UIListLayout")
UIListLayout.Padding = UDim2.new(0, 0, 0, 5)
UIListLayout.Parent = EventList

-- Título e controles
local Title = Instance.new("TextLabel")
Title.Text = "REMOTE EVENT MONITOR [PRO]"
Title.Size = UDim2.new(1, 0, 0, 30)
Title.TextColor3 = Color3.new(1, 1, 1)
Title.Font = Enum.Font.GothamBold
Title.BackgroundColor3 = Color3.fromRGB(30, 30, 45)
Title.Parent = MainFrame

-- Método avançado de captura
local function hookAllRemotes()
    -- 1. Captura tradicional de RemoteEvents
    local function hookStandardRemotes()
        local remotes = {
            game:GetService("ReplicatedStorage"),
            game:GetService("Workspace"),
            game:GetService("ServerScriptService"),
            game:GetService("ServerStorage")
        }
        
        for _, location in ipairs(remotes) do
            for _, remote in ipairs(location:GetDescendants()) do
                if remote:IsA("RemoteEvent") then
                    local oldFire = remote.FireServer
                    remote.FireServer = function(self, ...)
                        local args = {...}
                        print("[RemoteEvent] "..remote:GetFullName(), args)
                        return oldFire(self, unpack(args))
                    end
                end
            end
        end
    end

    -- 2. Captura de chamadas remotas customizadas
    local function hookCustomRemotes()
        local mt = getrawmetatable(game)
        local oldNamecall = mt.__namecall
        
        setreadonly(mt, false)
        
        mt.__namecall = newcclosure(function(self, ...)
            local method = getnamecallmethod()
            if tostring(method) == "FireServer" and self:IsA("RemoteEvent") then
                local args = {...}
                print("[CustomRemote] "..self:GetFullName(), args)
            end
            return oldNamecall(self, ...)
        end)
        
        setreadonly(mt, true)
    end

    -- 3. Captura de RemoteFunctions (se necessário)
    local function hookRemoteFunctions()
        local mt = getrawmetatable(game)
        local oldIndex = mt.__index
        
        setreadonly(mt, false)
        
        mt.__index = newcclosure(function(self, k)
            if k == "InvokeServer" and self:IsA("RemoteFunction") then
                local oldInvoke = oldIndex(self, k)
                return function(_, ...)
                    local args = {...}
                    print("[RemoteFunction] "..self:GetFullName(), args)
                    return oldInvoke(self, unpack(args))
                end
            end
            return oldIndex(self, k)
        end)
        
        setreadonly(mt, true)
    end

    -- Executa todos os métodos de hook
    hookStandardRemotes()
    hookCustomRemotes()
    hookRemoteFunctions()
end

-- Inicia o monitoramento
hookAllRemotes()

-- Sistema de log na interface
local function addEventToUI(remoteName, args)
    local entry = Instance.new("Frame")
    entry.Size = UDim2.new(1, 0, 0, 0)
    entry.BackgroundTransparency = 1
    entry.AutomaticSize = Enum.AutomaticSize.Y
    entry.Parent = EventList

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Text = "→ "..remoteName
    nameLabel.Size = UDim2.new(1, 0, 0, 20)
    nameLabel.TextColor3 = Color3.fromRGB(100, 200, 255)
    nameLabel.Font = Enum.Font.GothamMedium
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = entry

    for i, arg in ipairs(args) do
        local argLabel = Instance.new("TextLabel")
        argLabel.Text = "  ["..i.."] "..tostring(arg).." ("..typeof(arg)..")"
        argLabel.Size = UDim2.new(1, -20, 0, 18)
        argLabel.Position = UDim2.new(0, 20, 0, 20 + (i-1)*20)
        argLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
        argLabel.Font = Enum.Font.Gotham
        argLabel.TextXAlignment = Enum.TextXAlignment.Left
        argLabel.Parent = entry
    end

    EventList.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
end

-- Conecta a saída do print à interface
local oldPrint = print
print = function(...)
    local args = {...}
    local msg = table.concat(args, " ")
    
    if msg:find("%[RemoteEvent%]") or msg:find("%[CustomRemote%]") or msg:find("%[RemoteFunction%]") then
        local remoteName = msg:match("%[(.-)%] (.+) %[")
        local argsStr = msg:match("%[(.-)%]$") or ""
        
        if remoteName and argsStr then
            local success, argsTable = pcall(function()
                return game:GetService("HttpService"):JSONDecode("["..argsStr.."]")
            end)
            
            if success then
                addEventToUI(remoteName, argsTable)
            end
        end
    end
    
    return oldPrint(...)
end

-- Botão para limpar logs
local ClearButton = Instance.new("TextButton")
ClearButton.Text = "Clear Logs"
ClearButton.Size = UDim2.new(0.3, 0, 0, 25)
ClearButton.Position = UDim2.new(0.35, 0, 1, -25)
ClearButton.Parent = MainFrame

ClearButton.MouseButton1Click:Connect(function()
    for _, child in ipairs(EventList:GetChildren()) do
        if child:IsA("Frame") then
            child:Destroy()
        end
    end
end)

return "Remote Event Monitor iniciado com sucesso"
